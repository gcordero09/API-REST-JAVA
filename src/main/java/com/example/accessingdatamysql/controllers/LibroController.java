package com.example.accessingdatamysql.controllers;

import com.example.accessingdatamysql.models.LibroModel;
import com.example.accessingdatamysql.repositories.LibroRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.util.Optional;

@Controller // This means that this class is a Controller
@RequestMapping(path="/api") // This means URL's start with /demo (after Application path)
public class LibroController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private LibroRepository libroRepository;

    @GetMapping(path = "/libros")
    public @ResponseBody Iterable<LibroModel> getAllLibro() {
        // This returns a JSON or XML with the users
        return libroRepository.findAll();
    }

    @GetMapping(path = "/libros/{id}")
    public @ResponseBody Optional<LibroModel> getOneLibro(@PathVariable("id") Integer id){
        return libroRepository.findById(id);
    }

    @PostMapping(path = "/libros") // Map ONLY POST Requests
    public @ResponseBody String addNewLibro (@RequestBody LibroModel libro) {
        // @ResponseBody means the returned String is the response, not a view name

        libroRepository.save(libro);
        return "Saved";
    }

    @PutMapping(path = "/libros/{id}")
    public @ResponseBody String updateLibro(@RequestBody LibroModel libro, @PathVariable("id") Integer id){
        libro.setId(id);
        libroRepository.save(libro);
        return "Modified";
    }

    @DeleteMapping(path = "/libros/{id}")
    public @ResponseBody String deleteLibro(@PathVariable("id") Integer id){
        libroRepository.deleteById(id);
        return "Deleted";
    }
}